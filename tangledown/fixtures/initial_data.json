[
    {
        "pk": 1, 
        "model": "sites.site", 
        "fields": {
            "domain": "tangledown.org", 
            "name": "tangledown.org"
        }
    },
    
  {
    "pk": 1, 
    "model": "auth.user", 
    "fields": {
      "username": "tangledown", 
      "first_name": "", 
      "last_name": "", 
      "is_active": true, 
      "is_superuser": true, 
      "is_staff": true, 
      "last_login": "2011-12-04 13:48:55", 
      "groups": [], 
      "user_permissions": [], 
      "password": "sha1$a4627$977a1c03678150ffed84a61281cfce829d4cb421", 
      "email": "tangledown@tangledown.org", 
      "date_joined": "2011-12-04 13:46:39"
    }
  },
    
    {
    "pk": 1, 
    "model": "luau.wikipage", 
    "fields": {
      "body": "If you eat t[number](cookies ' cookies'), you consume t[](calories ' calories'). This constitutes t[](dailypercent percent) of a daily intake of t[number](100<dailycalories..100 ' calories').\r\n\r\nt[if](overninek)\r\n~ # It's over 9000!\r\n\r\n~~~~.initialize\r\n#cookies: 3\r\n#calories: 150\r\n#dailypercent: 1\r\n#dailycalories: 2100\r\n#overninek: 0\r\n~~~~\r\n~~~~.update\r\n#calories: #cookies * 50\r\n#dailypercent: (#cookies * 50) / #dailycalories\r\n#overninek: #calories > 9000\r\n~~~~", 
      "name": "home", 
      "title": "Home"
    }
  }, 
  {
    "pk": 2, 
    "model": "luau.wikipage", 
    "fields": {
      "body": "If you eat t[number](cookies ' cookies'), you consume t[](calories ' calories'). This constitutes t[](dailypercent percent) of a daily intake of t[number](100<dailycalories..100 ' calories').\r\n~~~~.initialize\r\n#cookies: 3\r\n#dailycalories: 2100\r\n~~~~\r\n~~~~.equations\r\n#calories: #cookies * 50\r\n#calories: #dailypercent * #dailycalories\r\n~~~~", 
      "name": "sympy", 
      "title": "Sympy"
    }
  }, 
  {
    "pk": 3, 
    "model": "luau.wikipage", 
    "fields": {
      "body": "If you want to make t[number](0<total cents_as_dollars) with t[number](coins ' coins'), use t[](pennies ' pennies'), t[](nickels ' nickels'), t[](dimes ' dimes'), t[](quarters ' quarters'), t[](halfdollars ' halfdollars') and t[](dollars ' dollars').\r\n\r\n~~~~.initialize\r\n#total: 300\r\n#coins: 5\r\n\r\n~~~~\r\n\r\n~~~~.equations\r\n#coins: #pennies + #nickels + #dimes + #quarters + #halfdollars + #dollars\r\n#total: #pennies + 5*#nickels + 25*#quarters + 10*#dimes  + 50*#halfdollars + 100*#dollars\r\n~~~~\r\n\r\n_Right now, TangleDown cannot solve this kind of problem. For one, it is underconstrained. Additionally, SymPy doens't solve inequalities in a way that would be easily captured through simple text Markdown. Using OpenMDAO, again, would solve this problem._\r\n", 
      "name": "coins", 
      "title": "Coins"
    }
  }, 
  {
    "pk": 4, 
    "model": "luau.wikipage", 
    "fields": {
      "body": "TangleDown is generally added to a Markdown document by \n\n- creating \"fenced code\" blocks of initial variable values and relationships between variables\n- creating inline `t[]()` tags for views of variables\n- creating block header `t[]()` tags for branching constructs based on variables\n\n## Code Blocks\nThe goal of TangleDown is to not feel too much like coding, but we need to know a little more than how you want to view and interact with your data. To make your document reactive, TangleDown needs two types of code: `initialize` and `update`. A variable, used in a view somewhere, needs to appear in either or both code blocks in order to work properly.\n\n### `initialize`\nAny number of `initialize` fenced code blocks will be read, and the variables mentioned there will be created and available for use when the page loads. \n\n    ~~~~.initialize\n    #cookies: 1\n    ~~~~\n\nwill get magically munged into. This is probably a huge XSS vulnerability: working on it.\n\n~~~~.javascript\n    this.cookies = 1\n~~~~\n\nImmediately after `initialize` is called, and every time a viewer interacts with a view, all `update` expressions will be reevaluated.\n\n    ~~~~.update\n    #calories: #cookies * 50\n    ~~~~\n\nwill become:\n\n~~~~.javascript\n    this.calories = this.cookies * 50\n~~~~\n\nRight now, the translation is pretty minimal, so basically you'll have to use JavaScript math notation, except with the `#` notation... hopefully this makes it a little easier to read the \"code\", without taking away too much power. A lot of useful operators are available out of the box: \n\n    +, /, %, *\n\nwhile the `Math` object provides many others: _from [javascripters](http://www.javascripter.net/faq/mathfunc.htm)_\n\n    Math.abs(a)     // the absolute value of a\n    Math.acos(a)    // arc cosine of a\n    Math.asin(a)    // arc sine of a\n    Math.atan(a)    // arc tangent of a\n    Math.atan2(a,b) // arc tangent of a/b\n    Math.ceil(a)    // integer closest to a and not less than a\n    Math.cos(a)     // cosine of a\n    Math.exp(a)     // exponent of a (Math.E to the power a)\n    Math.floor(a)   // integer closest to a, not greater than a\n    Math.log(a)     // log of a base e\n    Math.max(a,b)   // the maximum of a and b\n    Math.min(a,b)   // the minimum of a and b\n    Math.pow(a,b)   // a to the power b\n    Math.random()   // pseudorandom number 0 to 1 (see examples)\n    Math.round(a)   // integer closest to a (see rounding examples)\n    Math.sin(a)     // sine of a\n    Math.sqrt(a)    // square root of a\n    Math.tan(a)     // tangent of a\n\n## Basic Number View\n\n~~~~.initialize\n#answer: 42\n#heads: 2\n#tenses: 1001\n#timessmarter: 30000000000\n~~~~\n\nThe basic Tangle number view is a display-only, inline text span which will show a variable, such that typing\n\n     The answer to life, the universe and everything is t[](answer)\n\nwill create\n\n> The answer to life, the universe and everything is t[](answer)\n\nBasic views can optionally be formatted and labeled:\n\n     Zaphod has t[](heads ' heads')\n\nwill create\n\n> Zaphod has t[](heads ' heads')\n\nwhile\n\n     I am at a rough estimate t[](timessmarter humanized ' times') more intelligent than you\n\nwill create\n\n> I am at a rough estimate t[](timessmarter humanized ' times') more intelligent than you\n\n## Editable Views\nThe real power of Tangle lies in the intuitive editable views. Several are available from TangleKit.\n\n### Adjustable Number\n\n~~~~.initialize\n#years: 7\n~~~~\n\n~~~~.update\n#days: #years * 365\n~~~~\n\nThe adjustable number provides a lot of flexiblity without requiring too much extra definition. The basic form shows a whole number (non-negative integer), which can be clicked on and dragged to the right or the left to change numbers:\n\n    I am t[number](years ' years old'), so have been alive at least t[](days ' days')\n\nyields\n\n> I am t[number](years ' years old'), so have been alive at least t[](days ' days').\n\n`number` can be customized with minimum, maxmimum and increment values (as well as formats and labels like the read-only view). All are optional.\n\n    I am t[number](10<years..10<100 ' years old'), so have been alive at least t[](days ' days')\n\nyields\n\n> I am t[number](10<years..100 ' years old'), so have been alive at least t[](days ' days').\n\n### Number Field View\nSometimes, just typing a number is more intuitive than hunting for it through clicking and dragging. TangleKit provides for this case:\n\n    I am t[field](years) old, so have been alive at least t[](days ' days').\n\nyields\n\n> I am t[field](years) old, so have been alive at least t[](days ' days').\n\n## Branching\n~~~~.initialize\n#lights: 0\n~~~~\n~~~~.update\n#kilowatts: #lights * 100\n~~~~\n\nTangleDown can create several kinds of branching, so that parts of your document show up when certain conditions are met, sort of like \"choose your own adventures\".\n\nThe simplest type is an interactive view which changes a variable between _0_ and _1_.\n\n    The lights are t[toggle](lights)[off][on]. You are using t[](kilowatts ' kW') \n\nmakes\n\n> The lights are t[toggle](lights)[off, and it is very \n\tdark in here\n][on and it is very\n\tbright]. You are using t[](kilowatts ' kW') \n\nIf you have more to say than you \n\n    t[switch](lights)\n    |\tIt is dark. \n        You might be eaten by a grue.\n    \n    |\tIn the glaring light, \n        at least you can see the grue.\n\ncreates\n\n> t[switch](lights)\n> |\tIt is dark. You might be eaten by a grue.\n> \n> |\tIn the glaring light, at least you can see the grue.\n\n\n\n\n## Formats\nFormatting either uses the `sprintf` technique, which feels a lot like coding, but gets the job done.\n\nAdditionally, some more formatters are available, which return the values as:\n\n`cents_as_dollars`\n:\tnumber of pennies as dollars and cents\n\t> `1000` to _$10.00_\n        \n`humanized`     \n:\tspelled out in english words\n\t> `12007021 to _one million two hundred thousand seven hundred two_\n        \n`p3`\n:\tdecimal with precision to the thousandths\n\t> `.0011231` to _.001_\n\n`neg_p3`\n:\tnegative value with precision to the thousandths\n\t> `.0011231` to _-.001_\n\n\n`p3`\n:\tdecimal with precision to the hundredths\n\t> `.011231` to _.01_\n\n`e6`\n:\tfloored to the millions\n\t> `12007021` to _1_\n\n`abs_e6`\n:\tfloored to the millions, absolute\n\t> `-12007021` to _1_\n\n`freq`\n:\tas a frequency\n\t> `3000` to _3 KHz_\n\n`dollars`\n:\tdollars without cents\n\t> `10.01` to _$10_\n\n`free`\n:\tlike dollars, but free if zero\n\t> `0.0` to _free_ \n\n`percent`\n:\ta percent\n\t> `.7121` to _71%_\n\t", 
      "name": "syntax", 
      "title": "TangleDown Syntax"
    }
  },
  {
    "pk": 5, 
    "model": "luau.wikipage", 
    "fields": {
      "body": "If you take out a loan for t[number](principal..1000 dollars) at t[number](0<interest..0.0001 percent_2) in t[number](2011<start) and make a monthly payment of t[number](payment dollars):\r\n\r\n~~~~.initialize\r\n#principal: 100000\r\n#interest: .0475\r\n#start: 2011\r\n#payment: 1000\r\n~~~~\r\n\r\n#month | #remaining\r\n-------|------------\r\n0      | #principal\r\n+1     | * (1 + #interest/12) - #payment\r\n       | >= 0 ", 
      "name": "mortgage", 
      "title": "Mortgage"
    }
]
